ACK(1)		      User Contributed Perl Documentation		ACK(1)



NAME
       ack - grep-like text finder

SYNOPSIS
	   ack [options] PATTERN [FILE...]
	   ack -f [options] [DIRECTORY...]

DESCRIPTION
       Ack is designed as an alternative to grep for programmers.

       Ack searches the named input FILEs (or standard input if no files are
       named, or the file name - is given) for lines containing a match to the
       given PATTERN.  By default, ack prints the matching lines.

       PATTERN is a Perl regular expression.  Perl regular expressions are
       commonly found in other programming languages, but for the particulars
       of their behavior, please consult
       <http://perldoc.perl.org/perlreref.html|perlreref>.  If you don't know
       how to use regular expression but are interested in learning, you may
       consult <http://perldoc.perl.org/perlretut.html|perlretut>.  If you do
       not need or want ack to use regular expressions, please see the
       "-Q"/"--literal" option.

       Ack can also list files that would be searched, without actually
       searching them, to let you take advantage of ack's file-type filtering
       capabilities.

FILE SELECTION
       If files are not specified for searching, either on the command line or
       piped in with the "-x" option, ack delves into subdirectories selecting
       files for searching.

       ack is intelligent about the files it searches.	It knows about certain
       file types, based on both the extension on the file and, in some cases,
       the contents of the file.  These selections can be made with the --type
       option.

       With no file selection, ack searches through regular files that are not
       explicitly excluded by --ignore-dir and --ignore-file options, either
       present in ackrc files or on the command line.

       The default options for ack ignore certain files and directories.
       These include:

       o   Backup files: Files matching #*# or ending with ~.

       o   Coredumps: Files matching core.\d+

       o   Version control directories like .svn and .git.

       Run ack with the "--dump" option to see what settings are set.

       However, ack always searches the files given on the command line, no
       matter what type.  If you tell ack to search in a coredump, it will
       search in a coredump.

DIRECTORY SELECTION
       ack descends through the directory tree of the starting directories
       specified.  If no directories are specified, the current working
       directory is used.  However, it will ignore the shadow directories used
       by many version control systems, and the build directories used by the
       Perl MakeMaker system.  You may add or remove a directory from this
       list with the --[no]ignore-dir option. The option may be repeated to
       add/remove multiple directories from the ignore list.

       For a complete list of directories that do not get searched, run "ack
       --dump".

WHEN TO USE GREP
       ack trumps grep as an everyday tool 99% of the time, but don't throw
       grep away, because there are times you'll still need it.

       E.g., searching through huge files looking for regexes that can be
       expressed with grep syntax should be quicker with grep.

       If your script or parent program uses grep "--quiet" or "--silent" or
       needs exit 2 on IO error, use grep.

OPTIONS
       --ackrc
	   Specifies an ackrc file to load after all others; see "ACKRC
	   LOCATION SEMANTICS".

       -A NUM, --after-context=NUM
	   Print NUM lines of trailing context after matching lines.

       -B NUM, --before-context=NUM
	   Print NUM lines of leading context before matching lines.

       --[no]break
	   Print a break between results from different files. On by default
	   when used interactively.

       -C [NUM], --context[=NUM]
	   Print NUM lines (default 2) of context around matching lines.

       -c, --count
	   Suppress normal output; instead print a count of matching lines for
	   each input file.  If -l is in effect, it will only show the number
	   of lines for each file that has lines matching.  Without -l, some
	   line counts may be zeroes.

	   If combined with -h (--no-filename) ack outputs only one total
	   count.

       --[no]color, --[no]colour
	   --color highlights the matching text.  --nocolor suppresses the
	   color.  This is on by default unless the output is redirected.

	   On Windows, this option is off by default unless the
	   Win32::Console::ANSI module is installed or the "ACK_PAGER_COLOR"
	   environment variable is used.

       --color-filename=color
	   Sets the color to be used for filenames.

       --color-match=color
	   Sets the color to be used for matches.

       --color-lineno=color
	   Sets the color to be used for line numbers.

       --[no]column
	   Show the column number of the first match.  This is helpful for
	   editors that can place your cursor at a given position.

       --create-ackrc
	   Dumps the default ack options to standard output.  This is useful
	   for when you want to customize the defaults.

       --dump
	   Writes the list of options loaded and where they came from to
	   standard output.  Handy for debugging.

       --[no]env
	   --noenv disables all environment processing. No .ackrc is read and
	   all environment variables are ignored. By default, ack considers
	   .ackrc and settings in the environment.

       --flush
	   --flush flushes output immediately.	This is off by default unless
	   ack is running interactively (when output goes to a pipe or file).

       -f  Only print the files that would be searched, without actually doing
	   any searching.  PATTERN must not be specified, or it will be taken
	   as a path to search.

       --files-from=FILE
	   The list of files to be searched is specified in FILE.  The list of
	   files are separated by newlines.  If FILE is "-", the list is
	   loaded from standard input.

       --[no]filter
	   Forces ack to act as if it were receiving input via a pipe.

       --[no]follow
	   Follow or don't follow symlinks, other than whatever starting files
	   or directories were specified on the command line.

	   This is off by default.

       -g PATTERN
	   Print files where the relative path + filename matches PATTERN.
	   This option can be combined with --color to make it easier to spot
	   the match.

       --[no]group
	   --group groups matches by file name.  This is the default when used
	   interactively.

	   --nogroup prints one result per line, like grep.  This is the
	   default when output is redirected.

       -H, --with-filename
	   Print the filename for each match. This is the default unless
	   searching a single explicitly specified file.

       -h, --no-filename
	   Suppress the prefixing of filenames on output when multiple files
	   are searched.

       --[no]heading
	   Print a filename heading above each file's results.	This is the
	   default when used interactively.

       --help, -?
	   Print a short help statement.

       --help-types, --help=types
	   Print all known types.

       -i, --ignore-case
	   Ignore case distinctions in PATTERN

       --ignore-ack-defaults
	   Tells ack to completely ignore the default definitions provided
	   with ack.  This is useful in combination with --create-ackrc if you
	   really want to customize ack.

       --[no]ignore-dir=DIRNAME, --[no]ignore-directory=DIRNAME
	   Ignore directory (as CVS, .svn, etc are ignored). May be used
	   multiple times to ignore multiple directories. For example, mason
	   users may wish to include --ignore-dir=data. The --noignore-dir
	   option allows users to search directories which would normally be
	   ignored (perhaps to research the contents of .svn/props
	   directories).

	   The DIRNAME must always be a simple directory name. Nested
	   directories like foo/bar are NOT supported. You would need to
	   specify --ignore-dir=foo and then no files from any foo directory
	   are taken into account by ack unless given explicitly on the
	   command line.

       --ignore-file=FILTERTYPE:FILTERARGS
	   Ignore files matching FILTERTYPE:FILTERARGS.  The filters are
	   specified identically to file type filters as seen in "Defining
	   your own types".

       -k, --known-types
	   Limit selected files to those with types that ack knows about.
	   This is equivalent to the default behavior found in ack 1.

       --lines=NUM
	   Only print line NUM of each file. Multiple lines can be given with
	   multiple --lines options or as a comma separated list
	   (--lines=3,5,7). --lines=4-7 also works. The lines are always
	   output in ascending order, no matter the order given on the command
	   line.

       -l, --files-with-matches
	   Only print the filenames of matching files, instead of the matching
	   text.

       -L, --files-without-matches
	   Only print the filenames of files that do NOT match.

       --match PATTERN
	   Specify the PATTERN explicitly. This is helpful if you don't want
	   to put the regex as your first argument, e.g. when executing
	   multiple searches over the same set of files.

	       # search for foo and bar in given files
	       ack file1 t/file* --match foo
	       ack file1 t/file* --match bar

       -m=NUM, --max-count=NUM
	   Stop reading a file after NUM matches.

       --man
	   Print this manual page.

       -n, --no-recurse
	   No descending into subdirectories.

       -o  Show only the part of each line matching PATTERN (turns off text
	   highlighting)

       --output=expr
	   Output the evaluation of expr for each line (turns off text
	   highlighting) If PATTERN matches more than once then a line is
	   output for each non-overlapping match.  For more information please
	   see the section "Examples of --output".

       --pager=program, --nopager
	   --pager directs ack's output through program.  This can also be
	   specified via the "ACK_PAGER" and "ACK_PAGER_COLOR" environment
	   variables.

	   Using --pager does not suppress grouping and coloring like piping
	   output on the command-line does.

	   --nopager cancels any setting in ~/.ackrc, "ACK_PAGER" or
	   "ACK_PAGER_COLOR".  No output will be sent through a pager.

       --passthru
	   Prints all lines, whether or not they match the expression.
	   Highlighting will still work, though, so it can be used to
	   highlight matches while still seeing the entire file, as in:

	       # Watch a log file, and highlight a certain IP address
	       $ tail -f ~/access.log | ack --passthru 123.45.67.89

       --print0
	   Only works in conjunction with -f, -g, -l or -c (filename output).
	   The filenames are output separated with a null byte instead of the
	   usual newline. This is helpful when dealing with filenames that
	   contain whitespace, e.g.

	       # remove all files of type html
	       ack -f --html --print0 | xargs -0 rm -f

       -Q, --literal
	   Quote all metacharacters in PATTERN, it is treated as a literal.

       -r, -R, --recurse
	   Recurse into sub-directories. This is the default and just here for
	   compatibility with grep. You can also use it for turning
	   --no-recurse off.

       -s  Suppress error messages about nonexistent or unreadable files.
	   This is taken from fgrep.

       --[no]smart-case, --no-smart-case
	   Ignore case in the search strings if PATTERN contains no uppercase
	   characters. This is similar to "smartcase" in vim. This option is
	   off by default, and ignored if "-i" is specified.

	   -i always overrides this option.

       --sort-files
	   Sorts the found files lexicographically.  Use this if you want your
	   file listings to be deterministic between runs of ack.

       --show-types
	   Outputs the filetypes that ack associates with each file.

	   Works with -f and -g options.

       --type=[no]TYPE
	   Specify the types of files to include or exclude from a search.
	   TYPE is a filetype, like perl or xml.  --type=perl can also be
	   specified as --perl, and --type=noperl can be done as --noperl.

	   If a file is of both type "foo" and "bar", specifying --foo and
	   --nobar will exclude the file, because an exclusion takes
	   precedence over an inclusion.

	   Type specifications can be repeated and are ORed together.

	   See ack --help=types for a list of valid types.

       --type-add TYPE:FILTER:FILTERARGS
	   Files with the given FILTERARGS applied to the given FILTER are
	   recognized as being of (the existing) type TYPE.  See also
	   "Defining your own types".

       --type-set TYPE:FILTER:FILTERARGS
	   Files with the given FILTERARGS applied to the given FILTER are
	   recognized as being of type TYPE. This replaces an existing
	   definition for type TYPE.  See also "Defining your own types".

       --type-del TYPE
	   The filters associated with TYPE are removed from Ack, and are no
	   longer considered for searches.

       -v, --invert-match
	   Invert match: select non-matching lines

       --version
	   Display version and copyright information.

       -w, --word-regexp
	   Force PATTERN to match only whole words.  The PATTERN is wrapped
	   with "\b" metacharacters.

       -x  An abbreviation for --files-from=-; the list of files to search are
	   read from standard input, with one line per file.

       -1  Stops after reporting first match of any kind.  This is different
	   from --max-count=1 or -m1, where only one match per file is shown.
	   Also, -1 works with -f and -g, where -m does not.

       --thpppt
	   Display the all-important Bill The Cat logo.  Note that the exact
	   spelling of --thpppppt is not important.  It's checked against a
	   regular expression.

       --bar
	   Check with the admiral for traps.

       --cathy
	   Chocolate, Chocolate, Chocolate!

THE .ackrc FILE
       The .ackrc file contains command-line options that are prepended to the
       command line before processing.	Multiple options may live on multiple
       lines.  Lines beginning with a # are ignored.  A .ackrc might look like
       this:

	   # Always sort the files
	   --sort-files

	   # Always color, even if piping to a another program
	   --color

	   # Use "less -r" as my pager
	   --pager=less -r

       Note that arguments with spaces in them do not need to be quoted, as
       they are not interpreted by the shell. Basically, each line in the
       .ackrc file is interpreted as one element of @ARGV.

       ack looks in several locations for .ackrc files; the searching process
       is detailed in "ACKRC LOCATION SEMANTICS".  These files are not
       considered if --noenv is specified on the command line.

Defining your own types
       ack allows you to define your own types in addition to the predefined
       types. This is done with command line options that are best put into an
       .ackrc file - then you do not have to define your types over and over
       again. In the following examples the options will always be shown on
       one command line so that they can be easily copy & pasted.

       ack --perl foo searches for foo in all perl files. ack --help=types
       tells you, that perl files are files ending in .pl, .pm, .pod or .t. So
       what if you would like to include .xs files as well when searching for
       --perl files? ack --type-add perl:ext:xs --perl foo does this for you.
       --type-add appends additional extensions to an existing type.

       If you want to define a new type, or completely redefine an existing
       type, then use --type-set. ack --type-set eiffel:ext:e,eiffel defines
       the type eiffel to include files with the extensions .e or .eiffel. So
       to search for all eiffel files containing the word Bertrand use ack
       --type-set eiffel:ext:e,eiffel --eiffel Bertrand.  As usual, you can
       also write --type=eiffel instead of --eiffel. Negation also works, so
       --noeiffel excludes all eiffel files from a search. Redefining also
       works: ack --type-set cc:ext:c,h and .xs files no longer belong to the
       type cc.

       When defining your own types in the .ackrc file you have to use the
       following:

	 --type-set=eiffel:ext:e,eiffel

       or writing on separate lines

	 --type-set
	 eiffel:ext:e,eiffel

       The following does NOT work in the .ackrc file:

	 --type-set eiffel:ext:e,eiffel

       In order to see all currently defined types, use --help-types, e.g.
       ack --type-set backup:ext:bak --type-add perl:ext:perl --help-types

       In addition to filtering based on extension (like ack 1.x allowed), ack
       2 offers additional filter types.  The generic syntax is --type-set
       TYPE:FILTER:FILTERARGS; FILTERARGS depends on the value of FILTER.

       is:FILENAME
	   is filters match the target filename exactly.  It takes exactly one
	   argument, which is the name of the file to match.

	   Example:

	       --type-set make:is:Makefile

       ext:EXTENSION[,EXTENSION2[,...]]
	   ext filters match the extension of the target file against a list
	   of extensions.  No leading dot is needed for the extensions.

	   Example:

	       --type-set perl:ext:pl,pm,t

       match:PATTERN
	   match filters match the target filename against a regular
	   expression.	The regular expression is made case insensitive for
	   the search.

	   Example:

	       --type-set make:match:/(gnu)?makefile/

       firstlinematch:PATTERN
	   firstlinematch matches the first line of the target file against a
	   regular expression.	Like match, the regular expression is made
	   case insensitive.

	   Example:

	       --type-add perl:firstlinematch:/perl/

       More filter types may be made available in the future.

ENVIRONMENT VARIABLES
       For commonly-used ack options, environment variables can make life much
       easier.	These variables are ignored if --noenv is specified on the
       command line.

       ACKRC
	   Specifies the location of the user's .ackrc file.  If this file
	   doesn't exist, ack looks in the default location.

       ACK_OPTIONS
	   This variable specifies default options to be placed in front of
	   any explicit options on the command line.

       ACK_COLOR_FILENAME
	   Specifies the color of the filename when it's printed in --group
	   mode.  By default, it's "bold green".

	   The recognized attributes are clear, reset, dark, bold, underline,
	   underscore, blink, reverse, concealed black, red, green, yellow,
	   blue, magenta, on_black, on_red, on_green, on_yellow, on_blue,
	   on_magenta, on_cyan, and on_white.  Case is not significant.
	   Underline and underscore are equivalent, as are clear and reset.
	   The color alone sets the foreground color, and on_color sets the
	   background color.

	   This option can also be set with --color-filename.

       ACK_COLOR_MATCH
	   Specifies the color of the matching text when printed in --color
	   mode.  By default, it's "black on_yellow".

	   This option can also be set with --color-match.

	   See ACK_COLOR_FILENAME for the color specifications.

       ACK_COLOR_LINENO
	   Specifies the color of the line number when printed in --color
	   mode.  By default, it's "bold yellow".

	   This option can also be set with --color-lineno.

	   See ACK_COLOR_FILENAME for the color specifications.

       ACK_PAGER
	   Specifies a pager program, such as "more", "less" or "most", to
	   which ack will send its output.

	   Using "ACK_PAGER" does not suppress grouping and coloring like
	   piping output on the command-line does, except that on Windows ack
	   will assume that "ACK_PAGER" does not support color.

	   "ACK_PAGER_COLOR" overrides "ACK_PAGER" if both are specified.

       ACK_PAGER_COLOR
	   Specifies a pager program that understands ANSI color sequences.
	   Using "ACK_PAGER_COLOR" does not suppress grouping and coloring
	   like piping output on the command-line does.

	   If you are not on Windows, you never need to use "ACK_PAGER_COLOR".

AVAILABLE COLORS
       ack uses the colors available in Perl's Term::ANSIColor module, which
       provides the following listed values. Note that case does not matter
       when using these values.

   Foreground colors
	   black  red  green  yellow  blue  magenta  cyan  white

	   bright_black  bright_red	 bright_green  bright_yellow
	   bright_blue	 bright_magenta  bright_cyan   bright_white

   Background colors
	   on_black  on_red	 on_green  on_yellow
	   on_blue   on_magenta  on_cyan   on_white

	   on_bright_black  on_bright_red      on_bright_green	on_bright_yellow
	   on_bright_blue   on_bright_magenta  on_bright_cyan	on_bright_white

ACK & OTHER TOOLS
   Vim integration
       ack integrates easily with the Vim text editor. Set this in your .vimrc
       to use ack instead of grep:

	   set grepprg=ack\ -k

       That example uses "-k" to search through only files of the types ack
       knows about, but you may use other default flags. Now you can search
       with ack and easily step through the results in Vim:

	 :grep Dumper perllib

       Miles Sterrett has written a Vim plugin for ack which allows you to use
       ":Ack" instead of ":grep", as well as several other advanced features.

       <https://github.com/mileszs/ack.vim>

   Emacs integration
       Phil Jackson put together an ack.el extension that "provides a simple
       compilation mode ... has the ability to guess what files you want to
       search for based on the major-mode."

       <http://www.shellarchive.co.uk/content/emacs.html>

   TextMate integration
       Pedro Melo is a TextMate user who writes "I spend my day mostly inside
       TextMate, and the built-in find-in-project sucks with large projects.
       So I hacked a TextMate command that was using find + grep to use ack.
       The result is the Search in Project with ack, and you can find it here:
       <http://www.simplicidade.org/notes/archives/2008/03/search_in_proje.html>"

   Shell and Return Code
       For greater compatibility with grep, ack in normal use returns shell
       return or exit code of 0 only if something is found and 1 if no match
       is found.

       (Shell exit code 1 is "$?=256" in perl with "system" or backticks.)

       The grep code 2 for errors is not used.

       If "-f" or "-g" are specified, then 0 is returned if at least one file
       is found.  If no files are found, then 1 is returned.

DEBUGGING ACK PROBLEMS
       If ack gives you output you're not expecting, start with a few simple
       steps.

   Use --noenv
       Your environment variables and .ackrc may be doing things you're not
       expecting, or forgotten you specified.  Use --noenv to ignore your
       environment and .ackrc.

   Use -f to see what files have been selected
       Ack's -f was originally added as a debugging tool.  If ack is not
       finding matches you think it should find, run ack -f to see what files
       have been selected.  You can also add the "--show-types" options to
       show the type of each file selected.

   Use --dump
       This lists the ackrc files that are loaded and the options loaded from
       them.  So for example you can find a list of directories that do not
       get searched or where filetypes are defined.

TIPS
   Use the .ackrc file.
       The .ackrc is the place to put all your options you use most of the
       time but don't want to remember.  Put all your --type-add and
       --type-set definitions in it.  If you like --smart-case, set it there,
       too.  I also set --sort-files there.

   Use -f for working with big codesets
       Ack does more than search files.  "ack -f --perl" will create a list of
       all the Perl files in a tree, ideal for sending into xargs.  For
       example:

	   # Change all "this" to "that" in all Perl files in a tree.
	   ack -f --perl | xargs perl -p -i -e's/this/that/g'

       or if you prefer:

	   perl -p -i -e's/this/that/g' $(ack -f --perl)

   Use -Q when in doubt about metacharacters
       If you're searching for something with a regular expression
       metacharacter, most often a period in a filename or IP address, add the
       -Q to avoid false positives without all the backslashing.  See the
       following example for more...

   Use ack to watch log files
       Here's one I used the other day to find trouble spots for a website
       visitor.  The user had a problem loading troublesome.gif, so I took the
       access log and scanned it with ack twice.

	   ack -Q aa.bb.cc.dd /path/to/access.log | ack -Q -B5 troublesome.gif

       The first ack finds only the lines in the Apache log for the given IP.
       The second finds the match on my troublesome GIF, and shows the
       previous five lines from the log in each case.

   Examples of --output
       Following variables are useful in the expansion string:

       $&  The whole string matched by PATTERN.

       $1, $2, ...
	   The contents of the 1st, 2nd ... bracketed group in PATTERN.

       "$`"
	   The string before the match.

       "$'"
	   The string after the match.

       For more details and other variables see
       <http://perldoc.perl.org/perlvar.html#Variables-related-to-regular-expressions|perlvar>.

       This example shows how to add text around a particular pattern (in this
       case adding _ around word with "e")

	   ack2.pl "\w*e\w*" quick.txt --output="$`_$&_$'"
	   _The_ quick brown fox jumps over the lazy dog
	   The quick brown fox jumps _over_ the lazy dog
	   The quick brown fox jumps over _the_ lazy dog

       This shows how to pick out particular parts of a match using ( ) within
       regular expression.

	 ack '=head(\d+)\s+(.*)' --output=' $1 : $2'
	 input file contains "=head1 NAME"
	 output  "1 : NAME"

   Share your knowledge
       Join the ack-users mailing list.  Send me your tips and I may add them
       here.

FAQ
   Why isn't ack finding a match in (some file)?
       Probably because it's of a type that ack doesn't recognize.  ack's
       searching behavior is driven by filetype.  If ack doesn't know what
       kind of file it is, ack ignores the file.

       Use the "-f" switch to see a list of files that ack will search for
       you.  You can use the "--show-types" switch to show which type ack
       thinks each file is.

   Wouldn't it be great if ack did search & replace?
       No, ack will always be read-only.  Perl has a perfectly good way to do
       search & replace in files, using the "-i", "-p" and "-n" switches.

       You can certainly use ack to select your files to update.  For example,
       to change all "foo" to "bar" in all PHP files, you can do this from the
       Unix shell:

	   $ perl -i -p -e's/foo/bar/g' $(ack -f --php)

   Can I make ack recognize .xyz files?
       Yes!  Please see "Defining your own types".  If you think that ack
       should recognize a type by default, please see "ENHANCEMENTS".

   There's already a program/package called ack.
       Yes, I know.

   Why is it called ack if it's called ack-grep?
       The name of the program is "ack".  Some packagers have called it "ack-
       grep" when creating packages because there's already a package out
       there called "ack" that has nothing to do with this ack.

       I suggest you make a symlink named ack that points to ack-grep because
       one of the crucial benefits of ack is having a name that's so short and
       simple to type.

       To do that, run this with sudo or as root:

	  ln -s /usr/bin/ack-grep /usr/bin/ack

       Alternatively, you could use a shell alias:

	   # bash/zsh
	   alias ack=ack-grep

	   # csh
	   alias ack ack-grep

   What does ack mean?
       Nothing.  I wanted a name that was easy to type and that you could
       pronounce as a single syllable.

   Can I do multi-line regexes?
       No, ack does not support regexes that match multiple lines.  Doing so
       would require reading in the entire file at a time.

       If you want to see lines near your match, use the "--A", "--B" and
       "--C" switches for displaying context.

   Why is ack telling me I have an invalid option when searching for "+foo"?
       ack treats command line options beginning with "+" or "-" as options;
       if you would like to search for these, you may prefix your search term
       with "--" or use the "--match" option.  (However, don't forget that "+"
       is a regular expression metacharacter!)

   Why does "ack '.{40000,}'" fail?  Isn't that a valid regex?
       The Perl language limits the repetition quanitifier to 32K.  You can
       search for ".{32767}" but not ".{32768}".

ACKRC LOCATION SEMANTICS
       Ack can load its configuration from many sources.  This list specifies
       the sources Ack looks for configuration; each one that is found is
       loaded in the order specified here, and each one overrides options set
       in any of the sources preceding it.  (For example, if I set
       --sort-files in my user ackrc, and --nosort-files on the command line,
       the command line takes precedence)

       o   Defaults are loaded from App::Ack::ConfigDefaults.  This can be
	   omitted using "--ignore-ack-defaults".

       o   Global ackrc

	   Options are then loaded from the global ackrc.  This is located at
	   "/etc/ackrc" on Unix-like systems.

	   Under Windows XP and earlier, the ackrc is at "C:\Documents and
	   Settings\All Users\Application Data\ackrc".

	   Under Windows Vista/7, the global ackrc is at "C:\ProgramData"

	   The "--noenv" option prevents all ackrc files from being loaded.

       o   User ackrc

	   Options are then loaded from the user's ackrc.  This is located at
	   "$HOME/.ackrc" on Unix-like systems.

	   Under Windows XP and earlier, the user's ackrc is at "C:\Documents
	   and Settings\$USER\Application Data\ackrc".

	   Under Windows Vista/7, the user's ackrc is at
	   <C:\Users\$USER\AppData\Roaming>.

	   If you want to load a different user-level ackrc, it may be
	   specified with the $ACKRC environment variable.

	   The "--noenv" option prevents all ackrc files from being loaded.

       o   Project ackrc

	   Options are then loaded from the project ackrc.  The project ackrc
	   is the first ackrc file with the name ".ackrc" or "_ackrc", first
	   searching in the current directory, then the parent directory, then
	   the grandparent directory, etc.  This can be omitted using
	   "--noenv".

       o   --ackrc

	   The "--ackrc" option may be included on the command line to specify
	   an ackrc file that can override all others.	It is consulted even
	   if "--noenv" is present.

       o   ACK_OPTIONS

	   Options are then loaded from the environment variable
	   "ACK_OPTIONS".  This can be omitted using "--noenv".

       o   Command line

	   Options are then loaded from the command line.

DIFFERENCES BETWEEN ACK 1.X AND ACK 2.X
       A lot of changes were made for ack 2; here is a list of them.

   GENERAL CHANGES
       o   When no selectors are specified, ack 1.x only searches through
	   files that it can map to a file type.  ack 2.x, by contrast, will
	   search through every regular, non-binary file that is not
	   explicitly ignored via --ignore-file or --ignore-dir.  This is
	   similar to the behavior of the -a/--all option in ack 1.x.

       o   A more flexible filter system has been added, so that more powerful
	   file types may be created by the user.  For details, please consult
	   "Defining your own types".

       o   ack now loads multiple ackrc files; see "ACKRC LOCATION SEMANTICS"
	   for details.

       o   ack's default filter definitions aren't special; you may tell ack
	   to completely disregard them if you don't like them.

   REMOVED OPTIONS
       o   Because of the change in default search behavior, the -a/--all and
	   -u/--unrestricted options have been removed.  In addition, the
	   -k/--known-types option was added to cause ack to behave with the
	   default search behavior of ack 1.x.

       o   The -G option has been removed.  Two regular expressions on the
	   command line was considered too confusing; to simulate -G's
	   functionality, you may use the new -x option to pipe filenames from
	   one invocation of ack into another.

       o   The --binary option has been removed.

       o   The --skipped option has been removed.

       o   The --text option has been removed.

       o   The --invert-file-match option has been removed.  Instead, you may
	   use -v with -g.

   CHANGED OPTIONS
       o   The options that modify the regular expression's behavior (-i, -w,
	   -Q, and -v) may now be used with -g.

   ADDED OPTIONS
       o   --files-from was added so that a user may submit a list of
	   filenames as a list of files to search.

       o   -x was added to tell ack to accept a list of filenames via standard
	   input; this list is the list of filenames that will be used for the
	   search.

       o   -s was added to tell ack to suppress error messages about non-
	   existent or unreadable files.

       o   --ignore-directory and --noignore-directory were added as aliases
	   for --ignore-dir and --noignore-dir respectively.

       o   --ignore-file was added so that users may specify patterns of files
	   to ignore (ex. /.*~$/).

       o   --dump was added to allow users to easily find out which options
	   are set where.

       o   --create-ackrc was added so that users may create custom ackrc
	   files based on the default settings loaded by ack, and so that
	   users may easily view those defaults.

       o   --type-del was added to selectively remove file type definitions.

       o   --ignore-ack-defaults was added so that users may ignore ack's
	   default options in favor of their own.

       o   --bar was added so ack users may consult Admiral Ackbar.

AUTHOR
       Andy Lester, "<andy at petdance.com>"

BUGS
       Please report any bugs or feature requests to the issues list at
       Github: <https://github.com/petdance/ack2/issues>

ENHANCEMENTS
       All enhancement requests MUST first be posted to the ack-users mailing
       list at <http://groups.google.com/group/ack-users>.  I will not
       consider a request without it first getting seen by other ack users.
       This includes requests for new filetypes.

       There is a list of enhancements I want to make to ack in the ack issues
       list at Github: <https://github.com/petdance/ack2/issues>

       Patches are always welcome, but patches with tests get the most
       attention.

SUPPORT
       Support for and information about ack can be found at:

       o   The ack homepage

	   <http://beyondgrep.com/>

       o   The ack-users mailing list

	   <http://groups.google.com/group/ack-users>

       o   The ack issues list at Github

	   <https://github.com/petdance/ack2/issues>

       o   AnnoCPAN: Annotated CPAN documentation

	   <http://annocpan.org/dist/ack>

       o   CPAN Ratings

	   <http://cpanratings.perl.org/d/ack>

       o   Search CPAN

	   <http://search.cpan.org/dist/ack>

       o   Git source repository

	   <https://github.com/petdance/ack2>

ACKNOWLEDGEMENTS
       How appropriate to have acknowledgements!

       Thanks to everyone who has contributed to ack in any way, including
       Stephen Thirlwall, Jonah Bishop, Chris Rebert, Denis Howe, Raul Gundin,
       James McCoy, Daniel Perrett, Steven Lee, Jonathan Perret, Fraser
       Tweedale, Raal Gundan, Steffen Jaeckel, Stephan Hohe, Michael Beijen,
       Alexandr Ciornii, Christian Walde, Charles Lee, Joe McMahon, John
       Warwick, David Steinbrunner, Kara Martens, Volodymyr Medvid, Ron
       Savage, Konrad Borowski, Dale Sedivic, Michael McClimon, Andrew Black,
       Ralph Bodenner, Shaun Patterson, Ryan Olson, Shlomi Fish, Karen
       Etheridge, Olivier Mengue, Matthew Wild, Scott Kyle, Nick Hooey, Bo
       Borgerson, Mark Szymanski, Marq Schneider, Packy Anderson, JR Boyens,
       Dan Sully, Ryan Niebur, Kent Fredric, Mike Morearty, Ingmar Vanhassel,
       Eric Van Dewoestine, Sitaram Chamarty, Adam James, Richard Carlsson,
       Pedro Melo, AJ Schuster, Phil Jackson, Michael Schwern, Jan Dubois,
       Christopher J. Madsen, Matthew Wickline, David Dyck, Jason Porritt,
       Jjgod Jiang, Thomas Klausner, Uri Guttman, Peter Lewis, Kevin Riggle,
       Ori Avtalion, Torsten Blix, Nigel Metheringham, Gabor Szabo, Tod Hagan,
       Michael Hendricks, AEvar Arnfjoer` Bjarmason, Piers Cawley, Stephen
       Steneker, Elias Lutfallah, Mark Leighton Fisher, Matt Diephouse,
       Christian Jaeger, Bill Sully, Bill Ricker, David Golden, Nilson Santos
       F. Jr, Elliot Shank, Merijn Broeren, Uwe Voelker, Rick Scott, Ask Bjorn
       Hansen, Jerry Gay, Will Coleda, Mike O'Regan, Slaven ReziX, Mark
       Stosberg, David Alan Pisoni, Adriano Ferreira, James Keenan, Leland
       Johnson, Ricardo Signes, Pete Krawczyk and Rob Hoelz.

COPYRIGHT & LICENSE
       Copyright 2005-2014 Andy Lester.

       This program is free software; you can redistribute it and/or modify it
       under the terms of the Artistic License v2.0.

       See http://www.perlfoundation.org/artistic_license_2_0 or the
       LICENSE.md file that comes with the ack distribution.



perl v5.18.2			  2015-05-10				ACK(1)
